use std::fmt::Display;

use crate::position::Pos;

#[derive(Clone, Debug, PartialEq)]
pub enum Tok {
    LeftParen,
    RightParen,
    LeftBrace,
    RightBrace,
    LeftBracket,
    RightBracket,
    Plus,
    PlusEqual,
    PlusPlus,
    Minus,
    MinusEqual,
    MinusMinus,
    MinusGreater,
    Star,
    StarEqual,
    Slash,
    SlashEqual,
    Equal,
    EqualEqual,
    Bang,
    BangEqual,
    Lesser,
    LesserEqual,
    LesserLesser,
    LesserLesserEqual,
    Greater,
    GreaterEqual,
    GreaterGreater,
    GreaterGreaterEqual,
    Semicolon,
    Comma,
    Amp,
    AmpEqual,
    AmpAmp,
    Bar,
    BarEqual,
    BarBar,
    Hat,
    HatEqual,
    Dot,
    DotDotDot,
    Tilde,
    Percent,
    PercentEqual,
    Colon,
    QuestionMark,

    ConstLong(i64),
    ConstULong(u64),
    ConstInt(i32),
    ConstUInt(u32),
    ConstFloat(f32),
    ConstDouble(f64),
    Ident(String),
    Str(String),

    KeywordReturn,
    KeywordIf,
    KeywordElse,
    KeywordFor,
    KeywordWhile,
    KeywordDo,
    KeywordInt,
    KeywordChar,
    KeywordLong,
    KeywordShort,
    KeywordFloat,
    KeywordDouble,
    KeywordSizeof,
    KeywordStruct,
    KeywordUnion,
    KeywordVoid,
    KeywordTypedef,
    KeywordBool,
    KeywordEnum,
    KeywordStatic,
    KeywordGoto,
    KeywordBreak,
    KeywordContinue,
    KeywordSwitch,
    KeywordCase,
    KeywordDefault,
    KeywordExtern,
    KeywordAlignof,
    KeywordAlignas,
    KeywordSigned,
    KeywordUnsigned,
    KeywordConst,
    KeywordVolatile,
    KeywordAuto,
    KeywordRegister,
    KeywordRestrict,
    KeywordRestrict1,
    KeywordRestrict2,
    KeywordNoreturn,

    EndOfFile,
}

impl Tok {
    pub fn get_ident_name(&self) -> Option<String> {
        match self {
            Tok::Ident(ref name) => Some(name.clone()),
            _ => None,
        }
    }

    pub fn is_ident(&self) -> bool {
        match self {
            Tok::Ident(..) => true,
            _ => false,
        }
    }
}

#[derive(Debug, Clone, PartialEq)]
pub struct Token {
    pub pos: Pos,
    pub token: Tok,
}

impl Display for Tok {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let string = (|| {
            let string = match *self {
                Tok::LeftParen => "(",
                Tok::RightParen => ")",
                Tok::LeftBrace => "{",
                Tok::RightBrace => "}",
                Tok::LeftBracket => "[",
                Tok::RightBracket => "]",
                Tok::Plus => "+",
                Tok::PlusEqual => "+=",
                Tok::PlusPlus => "++",
                Tok::Minus => "-",
                Tok::MinusMinus => "--",
                Tok::MinusEqual => "-=",
                Tok::MinusGreater => "->",
                Tok::Star => "*",
                Tok::StarEqual => "*=",
                Tok::Slash => "/",
                Tok::SlashEqual => "/=",
                Tok::Equal => "=",
                Tok::EqualEqual => "==",
                Tok::Bang => "!",
                Tok::BangEqual => "!=",
                Tok::Greater => ">",
                Tok::GreaterEqual => ">=",
                Tok::GreaterGreater => ">>",
                Tok::GreaterGreaterEqual => ">>=",
                Tok::Lesser => "<",
                Tok::LesserEqual => "<=",
                Tok::LesserLesser => "<<",
                Tok::LesserLesserEqual => "<<=",
                Tok::Semicolon => ";",
                Tok::Comma => ",",
                Tok::Amp => "&",
                Tok::AmpEqual => "&=",
                Tok::AmpAmp => "&&",
                Tok::Bar => "|",
                Tok::BarEqual => "|=",
                Tok::BarBar => "||",
                Tok::Hat => "^",
                Tok::HatEqual => "^=",
                Tok::Dot => ".",
                Tok::DotDotDot => "...",
                Tok::Tilde => "~",
                Tok::Percent => "%",
                Tok::PercentEqual => "%=",
                Tok::Colon => ":",
                Tok::QuestionMark => "?",
                Tok::ConstLong(l) => return l.to_string(),
                Tok::ConstULong(ul) => return ul.to_string(),
                Tok::ConstInt(i) => return i.to_string(),
                Tok::ConstUInt(ui) => return ui.to_string(),
                Tok::ConstFloat(f) => return f.to_string(),
                Tok::ConstDouble(d) => return d.to_string(),
                Tok::Ident(ref ident) => ident,
                Tok::KeywordReturn => "return",
                Tok::KeywordIf => "if",
                Tok::KeywordElse => "else",
                Tok::KeywordFor => "for",
                Tok::KeywordWhile => "while",
                Tok::KeywordDo => "do",
                Tok::KeywordInt => "int",
                Tok::KeywordChar => "char",
                Tok::KeywordLong => "long",
                Tok::KeywordShort => "short",
                Tok::KeywordDouble => "double",
                Tok::KeywordFloat => "float",
                Tok::KeywordSizeof => "sizeof",
                Tok::KeywordStruct => "struct",
                Tok::KeywordUnion => "union",
                Tok::KeywordVoid => "void",
                Tok::KeywordTypedef => "typedef",
                Tok::KeywordBool => "_Bool",
                Tok::KeywordEnum => "enum",
                Tok::KeywordStatic => "static",
                Tok::KeywordGoto => "goto",
                Tok::KeywordBreak => "break",
                Tok::KeywordContinue => "continue",
                Tok::KeywordCase => "case",
                Tok::KeywordDefault => "default",
                Tok::KeywordSwitch => "switch",
                Tok::KeywordExtern => "extern",
                Tok::KeywordAlignof => "_Alignof",
                Tok::KeywordAlignas => "_Alignas",
                Tok::KeywordSigned => "signed",
                Tok::KeywordUnsigned => "unsigned",
                Tok::KeywordConst => "const",
                Tok::KeywordVolatile => "volatile",
                Tok::KeywordAuto => "auto",
                Tok::KeywordRegister => "register",
                Tok::KeywordRestrict => "restrict",
                Tok::KeywordRestrict1 => "__restrict",
                Tok::KeywordRestrict2 => "__restrict__",
                Tok::KeywordNoreturn => "_Noreturn",
                Tok::EndOfFile => "<eof>",
                Tok::Str(ref string) => return format!("{:?}", string),
            };
            string.to_string()
        })();
        write!(f, "{}", string)
    }
}
